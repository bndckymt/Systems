GROUP MEMBERS:
JUNE B GARCIA
ALEXIS BALMORES
RHYZA SERATO





import sqlite3

# Connection function to the SQLite database
def connect_to_db():
    # Use the specified file path for your SQLite database
    conn = sqlite3.connect("C:\\Users\\JAYSON\\OneDrive\\??????\\conda\\systemwithdatabases2.db")
    return conn

# Function to initialize the database
def initialize_db():
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category TEXT NOT NULL,
            item TEXT NOT NULL,
            description TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    cursor.close()
    conn.close()
    print("Database initialized.\n")

# Function to record user selections in the database
def record_purchase(category, item, description):
    conn = connect_to_db()
    cursor = conn.cursor()
    sql = "INSERT INTO user_purchases (category, item, description) VALUES (?, ?, ?)"
    cursor.execute(sql, (category, item, description))
    conn.commit()
    cursor.close()
    conn.close()
    print(f"Recorded purchase: {item} from {category}.\n")

# Function to display all recorded user purchases
def display_user_purchases():
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_purchases ORDER BY timestamp DESC")
    rows = cursor.fetchall()

    if rows:
        print("\nUser Purchase Log:\n")
        for row in rows:
            print(f"ID: {row[0]}, Category: {row[1]}, Item: {row[2]}, Description: {row[3]}, Time: {row[4]}")
    else:
        print("\nNo purchases recorded yet.")

    cursor.close()
    conn.close()
    print()

# Function to display merchandise and allow purchases
def display_merchandise():
    categories = {
        "Hoodies & Sweatshirts": {
            "Crewnecks": "Comfortable crewneck sweatshirts, perfect for all seasons.",
            "Zip-ups": "Stylish zip-up hoodies for casual wear.",
            "Pullover Hoodies": "Cozy pullover hoodies available in various colors.",
            "Fleece Sweatshirts": "Warm fleece sweatshirts for cold weather."
        },
        "Hats": {
            "Baseball Caps": "Classic baseball caps in different colors and designs.",
            "Beanies": "Warm beanies for winter.",
            "Bucket Hats": "Trendy bucket hats for a casual look.",
            "Fedoras": "Elegant fedoras for a stylish outfit.",
            "Straw Hats": "Lightweight straw hats perfect for summer."
        },
        "Bags & Backpacks": {
            "Tote Bags": "Durable tote bags for everyday use.",
            "Backpacks": "Spacious backpacks for work or school.",
            "Messenger Bags": "Comfortable messenger bags for a modern look.",
            "Fanny Packs": "Compact fanny packs for on-the-go convenience.",
            "Wallets": "Stylish wallets to keep your essentials organized."
        },
        "Jewelry": {
            "Necklaces": "Beautiful necklaces for any occasion.",
            "Bracelets": "Chic bracelets to match your style.",
            "Earrings": "Elegant earrings in various designs.",
            "Rings": "Rings for a touch of elegance.",
            "Keychains": "Unique keychains to personalize your belongings."
        },
        "Home & Living": {
            "Mugs": "Ceramic mugs for your favorite hot beverages.",
            "Coffee Cups": "Insulated coffee cups for on-the-go drinking.",
            "Cutting Boards": "High-quality cutting boards for kitchen use.",
            "Kitchen Towels": "Absorbent kitchen towels in various patterns.",
            "Aprons": "Aprons to keep you clean while cooking."
        }
    }

    print("Welcome to Smart Self-Service Retail!")
    print("Available Merchandise:\n")

    for i, (category, items) in enumerate(categories.items(), start=1):
        print(f"{i}. {category}")
        for item, description in items.items():
            print(f"   - {item}: {description}")
        print()

    # User selects a category
    category_list = list(categories.keys())
    category_choice = int(input("Select a category (number): ")) - 1
    if category_choice < 0 or category_choice >= len(category_list):
        print("Invalid category. Please try again.")
        return

    selected_category = category_list[category_choice]
    item_list = categories[selected_category]

    # User selects an item
    for i, (item, description) in enumerate(item_list.items(), start=1):
        print(f"{i}. {item} - {description}")
    item_choice = int(input("Select an item (number): ")) - 1
    if item_choice < 0 or item_choice >= len(item_list):
        print("Invalid item. Please try again.")
        return

    selected_item = list(item_list.keys())[item_choice]
    selected_description = item_list[selected_item]

    # Record the purchase
    record_purchase(selected_category, selected_item, selected_description)
    print(f"Thank you for purchasing {selected_item} from {selected_category} category!")

# Main menu
def main():
    initialize_db()  # Initialize the database

    while True:
        print("\n--- Smart Self-Service Retail ---")
        print("1. View Merchandise and Purchase")
        print("2. View Purchase Log")
        print("3. Exit")

        choice = input("Select an option (1-3): ")

        if choice == '1':
            display_merchandise()
        elif choice == '2':
            display_user_purchases()
        elif choice == '3':
            print("Thank you for using the system! Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
